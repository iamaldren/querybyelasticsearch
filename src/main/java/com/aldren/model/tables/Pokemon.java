/*
 * This file is generated by jOOQ.
 */
package com.aldren.model.tables;


import com.aldren.model.Aldren;
import com.aldren.model.Indexes;
import com.aldren.model.Keys;
import com.aldren.model.tables.records.PokemonRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pokemon extends TableImpl<PokemonRecord> {

    private static final long serialVersionUID = -1822803195;

    /**
     * The reference instance of <code>aldren.pokemon</code>
     */
    public static final Pokemon POKEMON = new Pokemon();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PokemonRecord> getRecordType() {
        return PokemonRecord.class;
    }

    /**
     * The column <code>aldren.pokemon.id</code>.
     */
    public final TableField<PokemonRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aldren.pokemon.name</code>.
     */
    public final TableField<PokemonRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>aldren.pokemon.species</code>.
     */
    public final TableField<PokemonRecord, String> SPECIES = createField("species", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>aldren.pokemon</code> table reference
     */
    public Pokemon() {
        this(DSL.name("pokemon"), null);
    }

    /**
     * Create an aliased <code>aldren.pokemon</code> table reference
     */
    public Pokemon(String alias) {
        this(DSL.name(alias), POKEMON);
    }

    /**
     * Create an aliased <code>aldren.pokemon</code> table reference
     */
    public Pokemon(Name alias) {
        this(alias, POKEMON);
    }

    private Pokemon(Name alias, Table<PokemonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pokemon(Name alias, Table<PokemonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Pokemon(Table<O> child, ForeignKey<O, PokemonRecord> key) {
        super(child, key, POKEMON);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Aldren.ALDREN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POKEMON_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PokemonRecord> getPrimaryKey() {
        return Keys.KEY_POKEMON_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PokemonRecord>> getKeys() {
        return Arrays.<UniqueKey<PokemonRecord>>asList(Keys.KEY_POKEMON_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pokemon as(String alias) {
        return new Pokemon(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pokemon as(Name alias) {
        return new Pokemon(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokemon rename(String name) {
        return new Pokemon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokemon rename(Name name) {
        return new Pokemon(name, null);
    }
}
