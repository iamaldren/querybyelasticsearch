/*
 * This file is generated by jOOQ.
 */
package com.aldren.model.tables;


import com.aldren.model.Aldren;
import com.aldren.model.Indexes;
import com.aldren.model.Keys;
import com.aldren.model.tables.records.PokemonTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PokemonType extends TableImpl<PokemonTypeRecord> {

    private static final long serialVersionUID = 934221686;

    /**
     * The reference instance of <code>aldren.pokemon_type</code>
     */
    public static final PokemonType POKEMON_TYPE = new PokemonType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PokemonTypeRecord> getRecordType() {
        return PokemonTypeRecord.class;
    }

    /**
     * The column <code>aldren.pokemon_type.id</code>.
     */
    public final TableField<PokemonTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>aldren.pokemon_type.type</code>.
     */
    public final TableField<PokemonTypeRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>aldren.pokemon_type</code> table reference
     */
    public PokemonType() {
        this(DSL.name("pokemon_type"), null);
    }

    /**
     * Create an aliased <code>aldren.pokemon_type</code> table reference
     */
    public PokemonType(String alias) {
        this(DSL.name(alias), POKEMON_TYPE);
    }

    /**
     * Create an aliased <code>aldren.pokemon_type</code> table reference
     */
    public PokemonType(Name alias) {
        this(alias, POKEMON_TYPE);
    }

    private PokemonType(Name alias, Table<PokemonTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private PokemonType(Name alias, Table<PokemonTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PokemonType(Table<O> child, ForeignKey<O, PokemonTypeRecord> key) {
        super(child, key, POKEMON_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Aldren.ALDREN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POKEMON_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PokemonTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_POKEMON_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PokemonTypeRecord> getPrimaryKey() {
        return Keys.KEY_POKEMON_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PokemonTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<PokemonTypeRecord>>asList(Keys.KEY_POKEMON_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PokemonType as(String alias) {
        return new PokemonType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PokemonType as(Name alias) {
        return new PokemonType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PokemonType rename(String name) {
        return new PokemonType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PokemonType rename(Name name) {
        return new PokemonType(name, null);
    }
}
